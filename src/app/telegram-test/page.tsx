'use client';

import { useState } from 'react';

interface ChatInfo {
  id: number;
  type: string;
  title?: string;
  username?: string;
  first_name?: string;
  last_name?: string;
}

interface TelegramResult {
  success?: boolean;
  error?: string;
  message?: string;
  chatInfo?: ChatInfo;
  instructions?: string[];
  alternativeMethods?: string[];
}

interface BotInfo {
  success?: boolean;
  error?: string;
  botInfo?: ChatInfo;
  updates?: Array<{
    update_id: number;
    message?: {
      chat: ChatInfo;
      text?: string;
    };
  }>;
  webhookInfo?: {
    url: string;
    has_custom_certificate: boolean;
    pending_update_count: number;
    last_error_date?: number;
    last_error_message?: string;
  };
}

export default function TelegramTestPage() {
  const [phoneNumber, setPhoneNumber] = useState('');
  const [loading, setLoading] = useState(false);
  const [result, setResult] = useState<TelegramResult | null>(null);
  const [botInfo, setBotInfo] = useState<BotInfo | null>(null);

  const getChatId = async () => {
    if (!phoneNumber) return;
    
    setLoading(true);
    try {
      const response = await fetch('/api/telegram/get-chat-id', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ phoneNumber }),
      });
      
      const data = await response.json();
      setResult(data);
    } catch {
      setResult({ error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞' });
    } finally {
      setLoading(false);
    }
  };

  const getBotInfo = async () => {
    setLoading(true);
    try {
      const response = await fetch('/api/telegram/bot-info');
      const data = await response.json();
      setBotInfo(data);
    } catch {
      setBotInfo({ error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ' });
    } finally {
      setLoading(false);
    }
  };

  const clearUpdates = async () => {
    setLoading(true);
    try {
      const response = await fetch('/api/telegram/bot-info', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ action: 'clear_updates' }),
      });
      
      const data = await response.json();
      if (data.success) {
        alert('–û–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã!');
        getBotInfo(); // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      }
    } catch {
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-4xl mx-auto px-4">
        <h1 className="text-3xl font-bold text-center mb-8 text-gray-800">
          üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram –ë–æ—Ç–∞
        </h1>
        
        <div className="grid md:grid-cols-2 gap-8">
          {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –ø–æ–ª—É—á–µ–Ω–∏–µ Chat ID */}
          <div className="bg-white p-6 rounded-lg shadow-md">
            <h2 className="text-xl font-semibold mb-4 text-blue-600">
              –ü–æ–ª—É—á–∏—Ç—å Chat ID
            </h2>
            
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–±–µ–∑ +)
                </label>
                <input
                  type="text"
                  value={phoneNumber}
                  onChange={(e) => setPhoneNumber(e.target.value)}
                  placeholder="79001234567"
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              </div>
              
              <button
                onClick={getChatId}
                disabled={loading || !phoneNumber}
                className="w-full bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                {loading ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'}
              </button>
            </div>
            
            {result && (
              <div className="mt-4 p-4 bg-gray-50 rounded-md">
                <h3 className="font-semibold mb-2">–†–µ–∑—É–ª—å—Ç–∞—Ç:</h3>
                <pre className="text-sm text-gray-700 whitespace-pre-wrap">
                  {JSON.stringify(result, null, 2)}
                </pre>
              </div>
            )}
          </div>
          
          {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ */}
          <div className="bg-white p-6 rounded-lg shadow-md">
            <h2 className="text-xl font-semibold mb-4 text-purple-600">
              –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
            </h2>
            
            <div className="space-y-4">
              <button
                onClick={getBotInfo}
                disabled={loading}
                className="w-full bg-purple-600 text-white py-2 px-4 rounded-md hover:bg-purple-700 disabled:opacity-50"
              >
                {loading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é'}
              </button>
              
              <button
                onClick={clearUpdates}
                disabled={loading}
                className="w-full bg-red-600 text-white py-2 px-4 rounded-md hover:bg-red-700 disabled:opacity-50"
              >
                –û—á–∏—Å—Ç–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
              </button>
            </div>
            
            {botInfo && (
              <div className="mt-4 space-y-4">
                {botInfo.botInfo && (
                  <div className="p-3 bg-green-50 rounded-md">
                    <h4 className="font-semibold text-green-800">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:</h4>
                    <pre className="text-sm text-green-700 mt-2">
                      {JSON.stringify(botInfo.botInfo, null, 2)}
                    </pre>
                  </div>
                )}
                
                {botInfo.updates && botInfo.updates.length > 0 && (
                  <div className="p-3 bg-blue-50 rounded-md">
                    <h4 className="font-semibold text-blue-800">
                      –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ({botInfo.updates.length}):
                    </h4>
                    <pre className="text-sm text-blue-700 mt-2 max-h-40 overflow-y-auto">
                      {JSON.stringify(botInfo.updates, null, 2)}
                    </pre>
                  </div>
                )}
                
                {botInfo.webhookInfo && (
                  <div className="p-3 bg-yellow-50 rounded-md">
                    <h4 className="font-semibold text-yellow-800">Webhook –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</h4>
                    <pre className="text-sm text-yellow-700 mt-2">
                      {JSON.stringify(botInfo.webhookInfo, null, 2)}
                    </pre>
                  </div>
                )}
              </div>
            )}
          </div>
        </div>
        
        {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ */}
        <div className="mt-8 bg-white p-6 rounded-lg shadow-md">
          <h2 className="text-xl font-semibold mb-4 text-gray-800">
            üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–ª—É—á–µ–Ω–∏—é Chat ID
          </h2>
          
          <div className="grid md:grid-cols-3 gap-6">
            <div className="space-y-2">
              <h3 className="font-semibold text-blue-600">–ú–µ—Ç–æ–¥ 1: @userinfobot</h3>
              <ol className="list-decimal list-inside text-sm text-gray-600 space-y-1">
                <li>–ù–∞–π–¥–∏—Ç–µ –±–æ—Ç–∞ @userinfobot –≤ Telegram</li>
                <li>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start</li>
                <li>–ë–æ—Ç –ø–æ–∫–∞–∂–µ—Ç –≤–∞—à Chat ID</li>
              </ol>
            </div>
            
            <div className="space-y-2">
              <h3 className="font-semibold text-purple-600">–ú–µ—Ç–æ–¥ 2: @RawDataBot</h3>
              <ol className="list-decimal list-inside text-sm text-gray-600 space-y-1">
                <li>–î–æ–±–∞–≤—å—Ç–µ @RawDataBot –≤ –≥—Ä—É–ø–ø—É</li>
                <li>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</li>
                <li>–ë–æ—Ç –ø–æ–∫–∞–∂–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é</li>
              </ol>
            </div>
            
            <div className="space-y-2">
              <h3 className="font-semibold text-green-600">–ú–µ—Ç–æ–¥ 3: –ß–µ—Ä–µ–∑ API</h3>
              <ol className="list-decimal list-inside text-sm text-gray-600 space-y-1">
                <li>–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ–º—É –±–æ—Ç—É</li>
                <li>–ù–∞–∂–º–∏—Ç–µ &quot;–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é&quot;</li>
                <li>–ù–∞–π–¥–∏—Ç–µ chat.id –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö</li>
              </ol>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
