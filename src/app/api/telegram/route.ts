import { NextRequest, NextResponse } from 'next/server';
import { validateAndSanitizeContactForm, logSuspiciousActivity, isBusinessHours } from '@/lib/security';

export async function POST(request: NextRequest) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞
    if (request.method !== 'POST') {
      return NextResponse.json(
        { error: '–ú–µ—Ç–æ–¥ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω' },
        { status: 405 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º Content-Type
    const contentType = request.headers.get('content-type');
    if (!contentType || !contentType.includes('application/json')) {
      return NextResponse.json(
        { error: '–ù–µ–≤–µ—Ä–Ω—ã–π Content-Type' },
        { status: 400 }
      );
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    const body = await request.json();
    const validationResult = validateAndSanitizeContactForm(body, request);

    if (!validationResult.isValid) {
      // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
      logSuspiciousActivity(request, 'Validation failed', { errors: validationResult.errors, data: body });
      
      return NextResponse.json(
        { 
          error: '–î–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é',
          details: validationResult.errors 
        },
        { status: 400 }
      );
    }

    const { sanitizedData } = validationResult;
    if (!sanitizedData) {
      return NextResponse.json(
        { error: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö' },
        { status: 400 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    if (!isBusinessHours()) {
      console.log('Form submitted outside business hours');
      // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –Ω–µ—Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const botToken = process.env.TELEGRAM_BOT_TOKEN;
    if (!botToken) {
      console.error('TELEGRAM_BOT_TOKEN not configured');
      console.error('Available env vars:', Object.keys(process.env).filter(key => key.includes('TELEGRAM')));
      return NextResponse.json(
        { error: '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞' },
        { status: 500 }
      );
    }

    const chatId = process.env.TELEGRAM_CHAT_ID;
    if (!chatId) {
      console.error('TELEGRAM_CHAT_ID not configured');
      console.error('Available env vars:', Object.keys(process.env).filter(key => key.includes('TELEGRAM')));
      return NextResponse.json(
        { error: 'ID —á–∞—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' },
        { status: 500 }
      );
    }

    console.log('Bot configuration loaded:', { botToken: botToken.substring(0, 10) + '...', chatId });

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    const telegramMessage = `üîî <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞!</b>

üë§ <b>–ò–º—è:</b> ${sanitizedData.name}
üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${sanitizedData.phone}
üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> ${sanitizedData.message}

‚è∞ <b>–í—Ä–µ–º—è:</b> ${new Date().toLocaleString('ru-RU')}
üåê <b>IP:</b> ${request.headers.get('x-forwarded-for') || request.headers.get('x-real-ip') || 'unknown'}
üïê <b>–†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è:</b> ${isBusinessHours() ? '–î–∞' : '–ù–µ—Ç'}`;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
    const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: telegramMessage,
        parse_mode: 'HTML'
      }),
    });

    if (!response.ok) {
      const errorData = await response.json();
      console.error('Telegram API error:', errorData);
      
      // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É Telegram API
      logSuspiciousActivity(request, 'Telegram API error', { 
        telegramError: errorData, 
        data: sanitizedData 
      });
      
      throw new Error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: ${errorData.description || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    }

    const result = await response.json();
    console.log('Message sent to Telegram successfully:', result);

    // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
    console.log('Form submitted successfully:', {
      timestamp: new Date().toISOString(),
      ip: request.headers.get('x-forwarded-for') || request.headers.get('x-real-ip') || 'unknown',
      userAgent: request.headers.get('user-agent') || 'unknown',
      data: sanitizedData
    });

    return NextResponse.json({ 
      success: true, 
      message: '–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram' 
    });

  } catch (error) {
    console.error('Error in Telegram API route:', error);
    
    // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
    logSuspiciousActivity(request, 'Unexpected error', { 
      error: error instanceof Error ? error.message : 'Unknown error' 
    });
    
    return NextResponse.json(
      { 
        error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è',
        details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      },
      { status: 500 }
    );
  }
}

