#!/usr/bin/env node

const https = require('https');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ URL
function checkUrl(url) {
  return new Promise((resolve) => {
    const req = https.get(url, (res) => {
      let data = '';
      
      res.on('data', (chunk) => {
        data += chunk;
      });
      
      res.on('end', () => {
        resolve({
          url,
          status: res.statusCode,
          contentType: res.headers['content-type'],
          size: data.length,
          success: res.statusCode === 200,
          data: data
        });
      });
    });
    
    req.on('error', (error) => {
      resolve({
        url,
        error: error.message,
        success: false
      });
    });
    
    req.setTimeout(10000, () => {
      req.destroy();
      resolve({
        url,
        error: 'Timeout',
        success: false
      });
    });
  });
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
async function checkProduction() {
  const baseUrl = 'https://www.mstrclinic.ru';
  const urls = [
    `${baseUrl}/sitemap.xml`,
    `${baseUrl}/sitemap-index.xml`,
    `${baseUrl}/robots.txt`
  ];
  
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Sitemap —Ñ–∞–π–ª–æ–≤ –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ...\n');
  
  for (const url of urls) {
    console.log(`–ü—Ä–æ–≤–µ—Ä—è—é: ${url}`);
    const result = await checkUrl(url);
    
    if (result.success) {
      console.log(`‚úÖ –°—Ç–∞—Ç—É—Å: ${result.status}`);
      console.log(`üìÑ –¢–∏–ø: ${result.contentType}`);
      console.log(`üìè –†–∞–∑–º–µ—Ä: ${result.size} –±–∞–π—Ç`);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –¥–ª—è sitemap —Ñ–∞–π–ª–æ–≤
      if (url.includes('sitemap') && result.data) {
        const lines = result.data.split('\n').slice(0, 5);
        console.log(`üìù –ù–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞:`);
        lines.forEach(line => console.log(`   ${line}`));
      }
    } else {
      console.log(`‚ùå –û—à–∏–±–∫–∞: ${result.error || result.status}`);
    }
    console.log('---');
  }
  
  console.log('\nüéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
  console.log('\nüìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
  console.log('1. –ï—Å–ª–∏ sitemap-index.xml –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 5-10 –º–∏–Ω—É—Ç');
  console.log('2. Vercel –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ');
  console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –¥–µ–ø–ª–æ—è –≤ Vercel Dashboard');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
if (require.main === module) {
  checkProduction().catch(console.error);
}

module.exports = { checkUrl, checkProduction };
